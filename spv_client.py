# spv_client.py
# Use SPV protocol to verify Bitcoin transaction
#
# HingOn Miu


import io
import random
import string
import json
import time
import requests
import urllib
import block_header


if __name__ == "__main__":
	print("Fetch block headers from full node proxy..")
	# TODO: run full node proxy first to let it parse all blocks
	#       fetch the block headers generated by the proxy
	#urllib.urlretrieve(FULL_NODE_PROXY_URL + "/blockheaders.dat", "blockheaders.dat")

	# spv client ready to parse block headers
	print("SPV client is initializing...")
	block_header.setup("blockheaders.dat")
	print("Set up done.")

	# use SPV protocol to verify bitcoin transaction
	while True:
		print("\n- Please enter a transaction ID to verify the Bitcoin transaction...")
		# big endian transaction ID
		txid = raw_input("> ")

		# check if input length is 64
		if len(txid) != 64:
			print("  Transaction ID shoud be 64 characters.")
			continue

		# check if input is proper hex string
		try:
			int(txid, 16)
		except ValueError:
			print("  Transaction ID shoud be hexadecimal.")
			continue

		# make GET request to full node proxy to retrieve merkle branches
		#response = requests.get(FULL_NODE_PROXY_URL + "/txid?" + txid)
		response = requests.get("http://127.0.0.1:9000" + "/txid?" + txid)

		# check status code
		if response.status_code != 200:
			print("  Cannot reach full node proxy.")
			continue

		# decode json response
		merkle_response = response.json()
		tx_count = int(merkle_response["tx_count"])
		tx_leaf_index = int(merkle_response["tx_leaf_index"])
		tx_branch_hashes = merkle_response["tx_branch_hashes"]
		tx_root_hash = merkle_response["tx_root_hash"]

		# use merkle branches to recontruct merkle tree to verify transaction hash
		message, confirmations = block_header.verify_transaction(txid, tx_count, tx_leaf_index,
																tx_branch_hashes, tx_root_hash)


		print("  Confirmations: " + str(confirmations))
		print("  " + message)




